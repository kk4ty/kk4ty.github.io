{
    "version": "https://jsonfeed.org/version/1",
    "title": "Coding之旅 • All posts by \"java\" category",
    "description": "JAVA",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/03/05/%E6%B3%A8%E8%A7%A3Builder%E8%B8%A9%E5%9D%91/",
            "url": "http://example.com/2025/03/05/%E6%B3%A8%E8%A7%A3Builder%E8%B8%A9%E5%9D%91/",
            "title": "注解Builder踩坑",
            "date_published": "2025-03-05T11:22:38.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JlbG9uZ3RvY29kZS9hcnRpY2xlL2RldGFpbHMvMTA5NTgzMDUz\">Lombok 的 @Builder 注解带来的两大坑</span></p>\n",
            "tags": [
                "java"
            ]
        },
        {
            "id": "http://example.com/2025/03/03/%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://example.com/2025/03/03/%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "面试题",
            "date_published": "2025-03-03T14:55:48.000Z",
            "content_html": "<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 题目：</span></span><br><span class=\"line\"><span class=\"comment\"> * new String(&quot;ab&quot;)会创建几个对象？看字节码，就知道是两个。</span></span><br><span class=\"line\"><span class=\"comment\"> *     一个对象是：new关键字在堆空间创建的</span></span><br><span class=\"line\"><span class=\"comment\"> *     另一个对象是：字符串常量池中的对象&quot;ab&quot;。 字节码指令：ldc</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 思考：</span></span><br><span class=\"line\"><span class=\"comment\"> * new String(&quot;a&quot;) + new String(&quot;b&quot;)呢？</span></span><br><span class=\"line\"><span class=\"comment\"> *  对象1：new StringBuilder()</span></span><br><span class=\"line\"><span class=\"comment\"> *  对象2： new String(&quot;a&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *  对象3： 常量池中的&quot;a&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> *  对象4： new String(&quot;b&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *  对象5： 常量池中的&quot;b&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> *  深入剖析： StringBuilder的toString():</span></span><br><span class=\"line\"><span class=\"comment\"> *      对象6 ：new String(&quot;ab&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"> *       强调一下，toString()的调用，在字符串常量池中，没有生成&quot;ab&quot;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> shkstart  shkstart@126.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020  20:38</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringNewTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        String str = new String(&quot;ab&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;a&quot;</span>) + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>s.intern()</code>  返回字符串常量池的引用地址，如果不手动赋值 s=s.intern ()，s 的引用不会改变。<br>\n字符串常量池里面不止可以记录字符串的内容，还可记录堆空间的地址值。<br>\n如果字符串常量池里面没有，通过字面量方式，一定会在字符串常量池里面再创建一个新的对象；但通过 s.intern () 方法不会创建新对象，只会记录 s 对象的地址值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 如何保证变量s指向的是字符串常量池中的数据呢？</span></span><br><span class=\"line\"><span class=\"comment\"> * 有两种方式：</span></span><br><span class=\"line\"><span class=\"comment\"> * 方式一： String s = &quot;shkstart&quot;;//字面量定义的方式</span></span><br><span class=\"line\"><span class=\"comment\"> * 方式二： 调用intern()</span></span><br><span class=\"line\"><span class=\"comment\"> *         String s = new String(&quot;shkstart&quot;).intern();</span></span><br><span class=\"line\"><span class=\"comment\"> *         String s = new StringBuilder(&quot;shkstart&quot;).toString().intern();</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> shkstart  shkstart@126.com</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@create</span> 2020  18:49</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringIntern</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">        s.intern();<span class=\"comment\">//调用此方法之前，字符串常量池中已经存在了&quot;1&quot;</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1&quot;</span>;</span><br><span class=\"line\">        System.out.println(s == s2);<span class=\"comment\">//jdk6：false   jdk7/8：false</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;1&quot;</span>) + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;1&quot;</span>);<span class=\"comment\">//s3变量记录的地址为：new String(&quot;11&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\">//执行完上一行代码以后，字符串常量池中，是否存在&quot;11&quot;呢？答案：不存在！！</span></span><br><span class=\"line\">        s3.intern();<span class=\"comment\">//在字符串常量池中生成&quot;11&quot;。如何理解：jdk6:创建了一个新的对象&quot;11&quot;,也就有新的地址。</span></span><br><span class=\"line\">                                            <span class=\"comment\">//         jdk7:此时常量中并没有创建&quot;11&quot;,而是创建一个指向堆空间中new String(&quot;11&quot;)的地址</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s4</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;11&quot;</span>;<span class=\"comment\">//s4变量记录的地址：使用的是上一行代码代码执行时，在常量池中生成的&quot;11&quot;的地址</span></span><br><span class=\"line\">        System.out.println(s3 == s4);<span class=\"comment\">//jdk6：false  jdk7/8：true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java面试题"
            ]
        },
        {
            "id": "http://example.com/2025/03/03/mybatis-plus%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4%E5%AD%97%E6%AE%B5%E4%B8%BAis-active/",
            "url": "http://example.com/2025/03/03/mybatis-plus%E9%80%BB%E8%BE%91%E5%88%A0%E9%99%A4%E5%AD%97%E6%AE%B5%E4%B8%BAis-active/",
            "title": "mybatis-plus逻辑删除字段为is_active",
            "date_published": "2025-03-03T13:40:28.000Z",
            "content_html": "<h1 id=\"全局配置\"><a class=\"markdownIt-Anchor\" href=\"#全局配置\">#</a> 全局配置</h1>\n<p>在  <code>application.yml</code>  中配置逻辑删除字段及其值：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis-plus:</span></span><br><span class=\"line\">  <span class=\"attr\">global-config:</span></span><br><span class=\"line\">    <span class=\"attr\">db-config:</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-field:</span> <span class=\"string\">is_active</span>  <span class=\"comment\"># 指定逻辑删除字段</span></span><br><span class=\"line\">      <span class=\"attr\">logic-delete-value:</span> <span class=\"number\">0</span>          <span class=\"comment\"># 已删除的值</span></span><br><span class=\"line\">      <span class=\"attr\">logic-not-delete-value:</span> <span class=\"number\">1</span>      <span class=\"comment\"># 未删除的值</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"实体类注解\"><a class=\"markdownIt-Anchor\" href=\"#实体类注解\">#</a> 实体类注解</h1>\n<p>在实体类中，使用  <code>@TableLogic</code>  注解标记 i <code>s_active</code>  字段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.baomidou.mybatisplus.annotation.TableLogic;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">YourEntity</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他字段...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TableLogic(value = &quot;1&quot;, delval = &quot;0&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer isActive;  <span class=\"comment\">// 对应数据库中的 is_active 字段</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>value = &quot;1&quot;</code>  表示未删除时的值。</li>\n<li><code>delval = &quot;0&quot;</code>  表示已删除时的值。</li>\n</ul>\n",
            "tags": [
                "java",
                "mybatis-plus"
            ]
        },
        {
            "id": "http://example.com/2025/03/01/java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/",
            "url": "http://example.com/2025/03/01/java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/",
            "title": "java代码优化",
            "date_published": "2025-03-01T02:05:43.000Z",
            "content_html": "<h1 id=\"字符串优化\"><a class=\"markdownIt-Anchor\" href=\"#字符串优化\">#</a> 字符串优化</h1>\n<p>1. 针对于 final 修饰类、方法、基本数据类型、引用数据类型的量的结构时，能使用上 final 的时候建议使用上。</p>\n<blockquote>\n<p>字符串拼接操作不一定使用的是 StringBuilder!<br>\n 如果拼接符号左右两边都是字符串常量或常量引用，则仍然使用编译期优化，即非 StringBuilder 的方式。</p>\n</blockquote>\n<p>2.StringBuilder 的 append () 的方式：自始至终中只创建过一个 StringBuilder 的对象</p>\n<blockquote>\n<p>使用 String 的字符串拼接方式：创建过多个 StringBuilder 和 String 的对象<br>\n使用 String 的字符串拼接方式：内存中由于创建了较多的 StringBuilder 和 String 的对象，内存占用更大；如果进行 GC，需要花费额外的时间。<br>\n体会执行效率：通过 StringBuilder 的 append () 的方式添加字符串的效率要远高于使用 String 的字符串拼接方式！</p>\n</blockquote>\n<p>3. 改进的空间：在实际开发中，如果基本确定要前前后后添加的字符串长度不高于某个限定值 highLevel 的情况下，建议使用构造器实例化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(highLevel);<span class=\"comment\">//new char[highLevel]</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "java",
                "优化",
                "字符串"
            ]
        }
    ]
}