{
    "version": "https://jsonfeed.org/version/1",
    "title": "Coding之旅 • All posts by \"优化\" tag",
    "description": "JAVA",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2025/03/01/java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/",
            "url": "http://example.com/2025/03/01/java%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/",
            "title": "java代码优化",
            "date_published": "2025-03-01T02:05:43.000Z",
            "content_html": "<h1 id=\"字符串优化\"><a class=\"markdownIt-Anchor\" href=\"#字符串优化\">#</a> 字符串优化</h1>\n<p>1. 针对于 final 修饰类、方法、基本数据类型、引用数据类型的量的结构时，能使用上 final 的时候建议使用上。</p>\n<blockquote>\n<p>字符串拼接操作不一定使用的是 StringBuilder!<br>\n 如果拼接符号左右两边都是字符串常量或常量引用，则仍然使用编译期优化，即非 StringBuilder 的方式。</p>\n</blockquote>\n<p>2.StringBuilder 的 append () 的方式：自始至终中只创建过一个 StringBuilder 的对象</p>\n<blockquote>\n<p>使用 String 的字符串拼接方式：创建过多个 StringBuilder 和 String 的对象<br>\n使用 String 的字符串拼接方式：内存中由于创建了较多的 StringBuilder 和 String 的对象，内存占用更大；如果进行 GC，需要花费额外的时间。<br>\n体会执行效率：通过 StringBuilder 的 append () 的方式添加字符串的效率要远高于使用 String 的字符串拼接方式！</p>\n</blockquote>\n<p>3. 改进的空间：在实际开发中，如果基本确定要前前后后添加的字符串长度不高于某个限定值 highLevel 的情况下，建议使用构造器实例化：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">StringBuilder</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(highLevel);<span class=\"comment\">//new char[highLevel]</span></span><br></pre></td></tr></table></figure>\n<p>4. <code>int</code>  类型的自增，字节码指令只需要一条，其余的（double）需要额外压入 1 再相加。</p>\n",
            "tags": [
                "java",
                "优化",
                "字符串"
            ]
        }
    ]
}